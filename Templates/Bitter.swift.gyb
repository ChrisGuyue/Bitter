//
//  Bitter.swift
//  Bitter
//
//  Created by Umberto Raimondi on 01/02/16.
//  Copyright Â© 2016 Umberto Raimondi. All rights reserved.
//

// MARK: Int types extensions
%{
  intTypes = [8,16,32,64]
}%

% for sign in ['','U']:
/**
Extension that adds a few additional functionalities to ${sign}Int:
- toIntN/toUIntN truncating bit pattern conversions
- allOnes
- size
- Byte indexed subscript
*/
extension ${sign}Int{
    % for intType in intTypes[:3]:
    /// Perform a bit pattern truncating conversion to UInt${intType}
    public var toU${intType}: UInt${intType}{return UInt${intType}(truncatingBitPattern:self)}
    /// Perform a bit pattern truncating conversion to Int${intType}
    public var to${intType}: Int${intType}{return Int${intType}(truncatingBitPattern:self)}
    %end
    /// Perform a bit pattern truncating conversion to UInt64
    public var toU64: UInt64{
        return UInt64(self) //No difference if the platform is 32 or 64
        }
    /// Perform a bit pattern truncating conversion to Int64
    public var to64: Int64{
        return Int64(self) //No difference if the platform is 32 or 64
        }
    %if sign == '':
    /// Perform a bit pattern truncating conversion to Int
    public var toInt:Int{return self}
    /// Perform a bit pattern truncating conversion to UInt
    public var toUInt:UInt{return UInt(bitPattern:self)}
    %else:
    /// Perform a bit pattern truncating conversion to Int
    public var toInt:Int{return Int(bitPattern:self)}
    /// Perform a bit pattern truncating conversion to UInt
    public var toUInt:UInt{return self}
    %end
    
    /// Returns a ${sign}Int with all ones
    %if sign == '':
    public static var allOnes:Int{return Int(bitPattern: UInt.max)}
    %else:
    public static var allOnes:UInt{return UInt.max}
    %end

    /// Returns the size of this type (number of bytes)
    public static var size:Int{return strideof(self)}


    % for bitidx in [0,1,2,3,4,5,6,7]:
        %if sign == '':
    /// Get bit ${bitidx} value
    public var b${bitidx}:Int{
        if(Int.size == 8){
            return Int(bitPattern: UInt( (self.toU64 & (0x1 << ${bitidx})) >> ${bitidx} ))
        } else {
            return Int(bitPattern: UInt( (self.toU32 & (0x1 << ${bitidx})) >> ${bitidx} ))
        }
    }
    /// Set bit ${bitidx} and return a new ${sign}Int
    public func setb${bitidx}(bit:Int)->Int{
        let nv = bit != 0 ? 1 : 0
        if(Int.size == 8){
            return Int(bitPattern: UInt( (self.toU64 & ~(0x1 << ${bitidx})) | (nv.toU64 << ${bitidx}) ))
        } else {
            return Int(bitPattern: UInt( (self.toU32 & ~(0x1 << ${bitidx})) | (nv.toU32 << ${bitidx}) ))
        }
    }
        %else:
    /// Get bit ${bitidx} value
    public var b${bitidx}:UInt{
        if(Int.size == 8){
            return UInt( (self.toU64 & (0x1 << ${bitidx})) >> ${bitidx} )
        } else {
            return UInt( (self.toU32 & (0x1 << ${bitidx})) >> ${bitidx} )
        }
    }
    /// Set bit ${bitidx} and return a new ${sign}Int
    public func setb${bitidx}(bit:Int)->UInt{
        let nv = bit != 0 ? 1 : 0
        if(Int.size == 8){
            return UInt( (self.toU64 & ~(0x1 << ${bitidx})) | (nv.toU64 << ${bitidx}) )
        } else {
            return UInt( (self.toU32 & ~(0x1 << ${bitidx})) | (nv.toU32 << ${bitidx}) )
        }
    }
        %end
    %end
 

    /// Subscript that returns or set one of the bytes of a ${sign}Int
    /// at the given index.
    /// Trying to access an out of index byte will result in an error.
    public subscript(index: Int) -> ${sign}Int {
    %if sign == '':
        get {
            precondition(index<Int.size,"Byte set index out of range")
            if(Int.size == 8){
                return Int(bitPattern: UInt((self.toU64 & (0xFF << (index.toU64*8))) >> (index.toU64*8)) )
            }else{
               return Int(bitPattern: UInt((self.toU32 & (0xFF << (index.toU32*8))) >> (index.toU32*8)) )
            }
        }
        set(newValue) {
            precondition(index<Int.size,"Byte set index out of range")
            if(Int.size == 8){
                self = Int(bitPattern: UInt((self.toU64 & ~(0xFF << (index.toU64*8))) | (newValue.toU64 << (index.toU64*8))) )
            }else{
                self = Int(bitPattern: UInt((self.toU32 & ~(0xFF << (index.toU32*8))) | (newValue.toU32 << (index.toU32*8))) )
            }
        }
    %else:
        get {
            precondition(index<Int.size,"Byte set index out of range")
            if(UInt.size == 8){
                return UInt(self.toU64 & (0xFF << (index.toU64*8))) >> (index*8).toUInt
            }else{
                return UInt(self.toU32 & (0xFF << (index.toU32*8))) >> (index*8).toUInt
            }
        }
        set(newValue) {
            precondition(index<Int.size,"Byte set index out of range")
            if(UInt.size == 8){
                self = UInt((self.toU64 & ~(0xFF << (index.toU64*8))) | (newValue.toU64 << (index.toU64*8)))
            }else{
                self = UInt((self.toU32 & ~(0xFF << (index.toU32*8))) | (newValue.toU32 << (index.toU32*8)))
            }
        }
    %end
    }
}
%end

% for intType in intTypes:
    % for sign in ['','U']:
/**
Extension that adds a few additional functionalities to ${sign}Int${intType}:
- toIntN/toUIntN truncating bit pattern conversions
- allOnes
- size
- Byte indexed subscript
*/
extension ${sign}Int${intType} {
        % for aSize in intTypes:
            %if intType > aSize:
    /// Perform a bit pattern truncating conversion to UInt${aSize}
    public var toU${aSize}: UInt${aSize}{return UInt${aSize}(truncatingBitPattern:self)}
    /// Perform a bit pattern truncating conversion to Int${aSize}
    public var to${aSize}: Int${aSize}{return Int${aSize}(truncatingBitPattern:self)}
            %elif intType == aSize:
                %if sign == '':
    /// Perform a bit pattern truncating conversion to UInt${aSize}
    public var toU${aSize}: UInt${aSize}{return UInt${aSize}(bitPattern:self)}
    /// Perform a bit pattern truncating conversion to Int${aSize}
    public var to${aSize}: Int${aSize}{return self}
                %else:
    /// Perform a bit pattern truncating conversion to UInt${aSize}
    public var toU${aSize}: UInt${aSize}{return self}
    /// Perform a bit pattern truncating conversion to Int${aSize}
    public var to${aSize}: Int${aSize}{return Int${aSize}(bitPattern:self)}
                %end
            %else:
    /// Perform a bit pattern truncating conversion to UInt${aSize}
    public var toU${aSize}: UInt${aSize}{return UInt${aSize}(self)}
    /// Perform a bit pattern truncating conversion to Int${aSize}
    public var to${aSize}: Int${aSize}{return Int${aSize}(self)}
            %end
        %end
        %if intType < 64:
    /// Perform a bit pattern truncating conversion to Int
    public var toInt:Int{return Int(bitPattern:UInt(self))}
    /// Perform a bit pattern truncating conversion to UInt
    public var toUInt:UInt{return UInt(self)}
        %else:
    /// Perform a bit pattern truncating conversion to Int
    public var toInt:Int{return Int(truncatingBitPattern:self)}
    /// Perform a bit pattern truncating conversion to UInt
    public var toUInt:UInt{return UInt(truncatingBitPattern:self)}
        %end
        /// Returns a ${sign}Int${intType} with all ones
        %if sign == '':
    public static var allOnes:Int${intType}{return Int${intType}(bitPattern: UInt${intType}.max)}
        %else:
    public static var allOnes:${sign}Int${intType}{return ${sign}Int${intType}.max}
        %end

    /// Returns the size of this type (number of bytes)
    public static var size:Int{return strideof(self)}

        % for bitidx in [0,1,2,3,4,5,6,7]:
            %if sign == '':
    /// Get bit ${bitidx} value
    public var b${bitidx}:${sign}Int${intType}{
        return ( (self.toU${intType} & (0x1 << ${bitidx})) >> ${bitidx} ).to${intType}
    }
    /// Set bit ${bitidx} and return a new ${sign}Int
    public func setb${bitidx}(bit:Int)->${sign}Int${intType}{
        let nv = bit != 0 ? 1 : 0
        return ( (self.toU${intType} & ~(0x1 << ${bitidx})) | (nv.toU${intType} << ${bitidx}) ).to${intType}
    }
            %else:
    /// Get bit ${bitidx} value
    public var b${bitidx}:${sign}Int${intType}{
        return (self & (0x1 << ${bitidx})) >> ${bitidx}
    }
    /// Set bit ${bitidx} and return a new ${sign}Int
    public func setb${bitidx}(bit:Int)->${sign}Int${intType}{
        let nv = bit != 0 ? 1 : 0
        return (self & ~(0x1 << ${bitidx})) | (nv.toU${intType} << ${bitidx})
    }
            %end
        %end
 

        %if intType == 8:

    /// Subscript that returns or set one of the bytes of this integer
    /// at the given index.
    /// Trying to access an out of index byte will result in an error.
    public subscript(index: Int) -> ${sign}Int8 {
        get {
            precondition(index<Int8.size,"Byte set index out of range")
            return self
        }
        set(newValue) {
            precondition(index<Int8.size,"Byte set index out of range")
            self = newValue
        }
    }
        %else:

    /// Subscript that returns or set one of the bytes of a ${sign}Int${intType} 
    /// at the given index.
    /// Trying to access an out of index byte will result in an error.
    public subscript(index: Int) -> ${sign}Int${intType} {
            %if sign == '':
        get {
            precondition(index<Int${intType}.size,"Byte set index out of range")
            return ((self.toU${intType} & (0xFF << (index.toU${intType}*8))) >> (index.toU${intType}*8)).to${intType}
        }
        set(newValue) {
            precondition(index<Int${intType}.size,"Byte set index out of range")
            self = ( (self.toU${intType} & ~(0xFF << (index.toU${intType}*8))) | (newValue.toU${intType} << (index.toU${intType}*8)) ).to${intType}
        }
            %else:
        get {
            precondition(index<Int${intType}.size,"Byte set index out of range")
            return (self & (0xFF << (index.toU${intType}*8))) >> (index.toU${intType}*8)
        }
        set(newValue) {
            precondition(index<Int${intType}.size,"Byte set index out of range")
            self = (self & ~(0xFF << (index.toU${intType}*8))) | (newValue.toU${intType} << (index.toU${intType}*8))
        }
            %end
    }
        %end
}

    %end
%end


// MARK: Operators

/// Double negation operator
prefix operator ~~ {}

% for intType in intTypes:
    % for sign in ['','U']:
/// Double negation operator for ${sign}Int${intType}
/// Returns 1 if value is not equal to 0, 0 otherwise
prefix func ~~(value: ${sign}Int${intType})->${sign}Int${intType}{
    return (value>0) ? 1 : 0
}
    %end
%end
